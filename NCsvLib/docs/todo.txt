Schema:
- record: add possibility to override fieldseparator char that
         is now defined in the <options> section
- add "nullvalue" attribute to represent the string that should be output if
  a field has Value = null. Default value: string.Empty        
- <fixedlen> should be changed to <fixedsize>
- Add tests for missing arguments (es. limit) and various checks:
  - limit values must be >= 0
  - fields inside a single record must have unique names
  - if separator is empty string, all fields must have size and fixed length
- SchemaRecordBase: add checking methods for unique id (to be executed in 
  Id property setter) 
  (should already be implemented because it inherits from IDictionary)
- Add bool type, with optional parameters for "truevalue" (default 'true') and
  "falsevalue" (default 'false')

Formatters:
- Support multiline strings (see articles on the web for the correct format)
- PrepareField: 
  - if a field has fixed size and fixed value the fixed value length should be
    the same as fixed size or the output string should be filled, or an exception
    should be thrown while reading the schema
- Add event generation during conversion to string, ie. 'Converting' and 'Converted'
  events. Pass as event args the string that should be output, the DataSourceField
  and SchemaField to be used.
- Evaluate an eventual Lua interface for custom formatters
- IDEAS: Improve custom formats:
  - expose only a IFieldFilter (or formatter or similar) interface with 
    at least one method:
    string Filter(object val) (where val is field value). 
    Basically it takes the output string formatted with
    a default ToString() (based on eventual <format> schema attribute) and
    outputs the string that will be effectively sent to the output string.
    Internal implementation can be mantained with ICustomFormatter, moving
    some methods to base classes.
  - Filters may be chained, solution may be one of these:
    - add a subtag of field in schema with filter names, ie:
      <field name="aa">
        <filter classname="Filter1" order="1" />  <-- first filter applied
        <filter classname="Filter2" order="2" />  <-- second filter applied
      </field>
    - user can define a custom filter that contains more than one filter

DataSourceReader:
- add methods or events to recognize when a reader for a record with limit=0 
  should stop (Read() returns false) (ie. because it's contained in a recordgroup)
  - pass parameters to open()? (ex. to put them in a WHERE clause)
  - expose events (passing current and previous lines)?

CsvReader:
- Add options to handle csv read errors in various ways: throw exception, 
  skip field, skip row, etc.
- If a record has limit=0 there must be
  some method to identify the end of record, maybe by recognizing a sort
  of 'signature' for a line
- Schema: add options:
  - trimws: trim white space (for example for fixed length string fields)
            (default true)
  - match: reg.expr. pattern to be matched (also in writer for control)
- Add a Parse() method to filters/formatters with reverse behaviour of 
  output filters
