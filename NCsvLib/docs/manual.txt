1. Schema
1.1. Introduction
1.2. Record
1.3. Record Group
1.4. Field
1.5. Custom formatters

2. CsvWriter
2.1. Introduction
2.2. Data Source
2.3. 
3. CsvReader

--------------------------------------------------------------------------------

1.5. Custom formatters

It is possible to define an attribute <custfmt> for a field. This must be set
to the name of a class that implements the IFormatProvider and ICustomFormatter
interfaces. To simplify this procedure the CustomFormatter class can be used
as base class for other custom formatters. Derived classes must only implement
ICustomFormatter.Format() method that returns the formatted string that will
be sent to the output writer.
There are some prebuilt custom formatters:
- NumberDigitsFormatter: removes any separator from a number representation,
leaving only digits. For example the number 15,742.83 will be converted to
"1574283".


2. CsvWriter

2.1. Introduction


                                |------ Schema ------|
                                |                    |
                                |                    |
DataSourceReader ----> CsvWriterController ----> Formatter ----> OutputWriter
        |
        |
DataSourceRecordReader

The basic blocks are:

- Schema:
Represents the structure of a csv file. It is a tree of 'records', where each 
record represents the structure of a single line. 
Every record is a collection of 'fields' that represent a single value.
Every field will be separated from the following by a field separator, if 
specified.
For example, let's define a schema with a single 'Users' record with a total of
4 fields: first name, surname, city, email. We also specify that the field 
separator is ';'. An example output file may contain two users:

name1;surname1;city1;email1@address;
name2;surname2;city2;email2@address;

The schema is implemented with a 'Composite' pattern, so it is possible to 
define even complex file structures.

- CsvWriterController