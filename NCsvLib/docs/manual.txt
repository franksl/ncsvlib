1. Schema
1.1. Introduction
1.2. Xml schema
1.3. Options
1.4. Record
1.5. Record Group
1.6. Field
1.6.1. Data types
1.7. Custom formatters
1.8. Schema readers

2. CsvWriter
2.1. Introduction
2.2. Data Source
2.3. 

3. CsvReader
3.1. Introduction

--------------------------------------------------------------------------------

1. Schema


1.3. Options

- Limit
This can be used to constrain the number of rows read by the DataSourceReader
that will be output to the csv file/stream.
It can have one or two numeric arguments, separated by a comma. With two 
arguments, the first specifies the offset of the first row to output (zero 
based), the second specifies the maximum number of rows to output.
With only one argument, its value specifies the maximum number of rows to 
output.
Limit is ignored if it has a value of zero for the maximum
Examples: 
<record id="recid" limit="50,100" /> outputs a maximum of 100 rows starting from
                                     the 51th.
<record id="recid" limit="0" /> ignored (no limits)


1.6. Field

Field is the smallest working unit in NCsvLib. It represents a single value for
a record, and reflects a single value coming from the data source.
Field definition contains various parameters to define many aspects of the
conversion that will take place while writing to or reading from a csv stream.
These parameters are:
- name: the unique name of the field, must be the same in data source
- type: one of the predefined data types
- format
- custfmt
- alignment
- fixedsize
- size
- filled
- fillchar
- addquotes
- quotes
- hasfixedvalue: true if the field has a fixed value defined in fixedvalue
- fixedvalue: fixed value given to the field, if hasfixedvalue is true
- comment: user defined description for the field
- colhdr: name to be given to the column header, if allowed
- truevalue: only for bool type, defines the string used to represent 'true'
             in csv stream
- falsevalue: only for bool type, defines the string used to represent 'true'
              in csv stream
- trueiovalue: only for bool type, defines the value used to represent 'true'
               in data source/destination
- falseiovalue: only for bool type, defines the value used to represent 'false'
               in data source/destination
- booliotype: only for bool type, defines the data type used in data source/
              destination for bool type. It's the data type for trueiovalue
              and falseiovalue and can be int, string, bool.
- nullvaluewrt: Writer: value to be assigned when data source field value is null

1.6.1. Data types

Any field has a data type chosen from a list of predefined types:
- int: integer
- string
- double: floating point
- decimal: precision math
- datetime
- bool


1.7. Custom formatters

It is possible to define an attribute <custfmt> for a field. This must be set
to the name of a class that implements the IFormatProvider and ICustomFormatter
interfaces. To simplify this procedure the CustomFormatter class can be used
as base class for other custom formatters. Derived classes must only implement
ICustomFormatter.Format() method that returns the formatted string that will
be sent to the output writer.
There are some prebuilt custom formatters:
- NumberDigitsFormatter: removes any separator from a number representation,
leaving only digits. For example the number 15,742.83 will be converted to
"1574283".

1.8. Schema readers
A schema reader is a class that implements ISchemaReader interface. This is a
very basic interface that imposes just the property Sch.
The default schema reader is SchemaReaderXml that reads an xml file built as
explained before.
SchemaReaderXml.Sch property reads and returns the schema, for it to be 
eventually modified before calling controller's Execute method.


2. CsvWriter

2.1. Introduction


                       Schema ---- Formatter
                          |           |
                          |           |
DataSourceReader ----> CsvWriterController ----> OutputWriter
        |
DataSourceRecordReader

The basic blocks are:

- Schema:
Represents the structure of a csv file. It is a tree of 'records', where each 
record represents the structure of a single line. 
Each record is a collection of 'fields' that represent a single value.
Each field will be separated from the following by a field separator, if 
specified.
For example, let's define a schema with a single 'Users' record with a total of
4 fields: first name, surname, city, email. We also specify that the field 
separator is ';'. An example output file may contain two users:

name1;surname1;city1;email1@address;
name2;surname2;city2;email2@address;

The schema is implemented with a 'Composite' pattern, so it is possible to 
define even complex file structures.

- CsvWriterController


3. CsvReader

3.1. Introduction


         CsvReaderSchemaChecker
                  |
   Parser ---- Schema ------|
      |                     |
      |                     |
CsvInputReader ----> CsvReaderController ----> DataDestinationWriter
                                                        |
                                            DataDestinationRecordWriter

The basic blocks are:

- Schema: please refer to the writer section

- CsvReaderSchemaChecker: 
Class that verifies the readability of the Schema, making sure that the reader
can clearly identify record start, end, etc.

